<div class="container mx-auto p-8">
  {% render 'component-cart-notification' %}
  {% if section.settings.is_collection_title_shown %}
    <h1 class="text-3xl font-bold text-center my-8">{{ collection.title }}</h1>
  {% endif %}

  {% if section.settings.is_sorting_shown %}
    <select id="sort-by" class="text-black my-4 p-2 rounded-md outline-none">
      {% assign sort_by = collection.sort_by | default: collection.default_sort_by %}
      {% for option in collection.sort_options %}
        <option value="{{ option.value }}" {% if option.value == sort_by %}selected="selected"{% endif %}>
          {{ option.name }}
        </option>
      {% endfor %}
    </select>
  {% endif %}
 
  <div class="{% if collection.products.size > 2 %} grid grid-cols-1 md:grid-cols-3 {%else%} justify-center flex flex-wrap md:flex-nowrap{% endif %} gap-5">
    {% for product in collection.products %}
      <div class="product w-full" data-id="{{ product.first_available_variant.id }}">
      {% render 'component-card', productProp: product, isAddtoCartButtonShownProp: section.settings.is_add_to_cart_buttons_shown %}
      </div>
    {% endfor %}
  </div>

  {% render 'component-cart-notification' %}

</div>

<script>
  Shopify.queryParams = {};
  
  // Preserve existing query parameters
  if (location.search.length) {
    var params = location.search.substr(1).split('&');

    for (var i = 0; i < params.length; i++) {
      var keyValue = params[i].split('=');

      if (keyValue.length) {
        Shopify.queryParams[decodeURIComponent(keyValue[0])] = decodeURIComponent(keyValue[1]);
      }
    }
  }

  // Update sort_by query parameter on select change
  document.querySelector('#sort-by').addEventListener('change', function(e) {
    var value = e.target.value;

    Shopify.queryParams.sort_by = value;
    location.search = new URLSearchParams(Shopify.queryParams).toString();
  });
</script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
   document
  .querySelectorAll('.cart-button').forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault()

      const variantID = button.closest('.product').getAttribute('data-id')
     
      axios
      .post('/cart/add.js', {
        id: variantID,
        quantity: 1
      }).then(res => {
        const format = '{{ shop.money_format }}'

      const cartNotification =  document.querySelector(".cart-notification")
      
      cartNotification.classList.remove('hidden')
      cartNotification.innerHTML = `
      <div class="flex justify-between">
        <h2 class="text-large">Added to Cart</h2>
        <button type="button" onClick="closeCartNotification()">X</button>
      </div>
      <div class="flex mb-8 items-center gap-2">
        <img class="h-20 w-20" src="${res.data.featured_image.url}" alt="${res.data.featured_image.alt}">
        <div>
          <h3 class="cart-notification-price text-large">${res.data.title}</h3>
          <p class="cart-notification-price text-large">Price: ${formatMoney(res.data.final_line_price, format)}</p>
          <p class="cart-notification-quantity text-large">Quantity: ${res.data.quantity}</p>
        </div>
      </div>
      <a class="text-white bg-green-700 hover:bg-green-600 rounded-xl p-4 z-10 w-full" href="/cart">View my cart</a>
      <button type="submit" name="checkout">Checkout</button>
      `
      })
    })
  })
</script>

{% schema %}
  {
    "name": "Collection",
    "settings": [
      {
        "type": "checkbox",
        "id": "is_collection_title_shown",
        "default": true,
        "label": "Show collection title"
      }, {
        "type": "checkbox",
        "id": "is_add_to_cart_buttons_shown",
        "default": true,
        "label": "Display add to cart buttons"
      }, {
        "type": "checkbox",
        "id": "is_sorting_shown",
        "default": true,
        "label": "Enable sorting"
      }
    ]
  }
{% endschema %}